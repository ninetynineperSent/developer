1) vim history_of_vim.txt
	там вводим все что нужно через копипаст, или вручну, потом сохраняем shift+zz
2) touch logs.txt
	создаем файл куда скнием хэш history_of_vim.txt
   sha256sum history_of_vim.txt >> logs.txt
	скидываем весь кэш по заданному пути в ткт файл
3) mkdir sorted
   cd sorted
   touch k..key    #(10 times)
   touch t..txt    #(7 times)
4) mkdir txtfiles
   mkdir keysfiles
   cd ~/mybash
   nano sortedscript.sh
	#!/bin/bash

	find ~/mybash/sorted/ -name '*.txt' -exec mv -t ~/mybash/sorted/txtfiles/ -- {} +
	find ~/mybash/sorted/ -name '*.key' -exec mv -t ~/mybash/sorted/keysfiles/ -- {} +
   bash sortedscript.sh
5-7) nano replacescript.sh
	#!/bin/bash

	read -p "enter filename: " filename
	read -p "which string we're going to replace? " old_string
	read -p "enter string, which will be pasteded: " new_string


	#sed -i "1,+5 s|$old_string|$new_string|g" ~/mybash/history_of_vim.txt
	sed -i "s|$old_string|$new_string|g" ~/mybash/$filename


	date_result=$(date +"%d.%m.%Y %H:%M:%S")
	sha=$(sha256sum $filename)

	temp=( $sha )
	sha=${temp[0]}

	echo "| date: $date_result | filename: $filename | hash: $sha | algoritm: sha256 |" >> logs.txt

   bash replacescript.sh
dop)#!/bin/bash

	filename="logs.txt" # название файла

	# считаем кол-во строчек в файле
	count=$(sed -n \$= $filename)

	# создвем массивы для всех хэшей и для всех файлов
	all_names=()
	all_hashs=()

	# перебираем каждую строчку
	for ((i = 1; i <= count; i++)) 
	do
	    echo $i
	    # храним в temp строку под номером i
	    temp=$(sed -n "$i p" $filename)
	    echo "$temp"

	    # разделяем строку на элементы через пробелы и записываем в массив
	    IFS=' ' read -r -a array <<< "$temp"

	    # записывем имя и хэш файла в соответсвующий массив
	    all_names+=(${array[6]})
	    all_hashs+=(${array[9]})
    
 	    # делаем проверку
	    echo "это хэш $i строки: "${array[9]}
	    echo "это имя файла $i строки: "${array[6]}
	done

	# создаем новые массивы
	new_all_names=()
	new_all_hashs=()

	# удаляем одинакеовые элементы из массивов

	unset dupes 
	declare -A dupes

	for i in "${all_names[@]}"; do
		    if [[ -z ${dupes[$i]} ]]; then
	        new_all_names+=("$i")
	    fi
	    dupes["$i"]=1
	done

	for i in "${all_hashs[@]}"; do
	    if [[ -z ${dupes[$i]} ]]; then
	        new_all_hashs+=("$i")
	    fi
	    dupes["$i"]=1
	done
	unset dupes 


	echo "количество уникальных имен файлов: "${#new_all_names[@]}
	echo "количество уникальных hash файлов: "${#new_all_hashs[@]}

	echo "количество внесенных изменений: "$count


	# echo ${#a[@]}







